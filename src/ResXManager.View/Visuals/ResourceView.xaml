<UserControl x:Class="ResXManager.View.Visuals.ResourceView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d" d:DesignHeight="300" d:DesignWidth="800"
             xmlns:dgx="urn:tom-englert.de/DataGridExtensions"
             xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
             xmlns:model="urn:ResXManager.Model"
             xmlns:toms="urn:TomsToolbox"
             xmlns:properties="clr-namespace:ResXManager.View.Properties"
             xmlns:converters="clr-namespace:ResXManager.View.Converters"
             xmlns:columnHeaders="clr-namespace:ResXManager.View.ColumnHeaders"
             xmlns:behaviors="clr-namespace:ResXManager.View.Behaviors"
             xmlns:tools="clr-namespace:ResXManager.View.Tools"
             xmlns:infrastructure="urn:ResXManager.Infrastructure"
             xmlns:visuals="clr-namespace:ResXManager.View.Visuals"
             xmlns:view="clr-namespace:ResXManager.View"
             xmlns:styles="urn:TomsToolbox.Wpf.Styles"
             xmlns:themes="clr-namespace:ResXManager.View.Themes"
             xmlns:composition="urn:TomsToolbox.Composition"
             xmlns:Interactions="http://schemas.microsoft.com/xaml/behaviors"
             x:Name="LayoutRoot"
             d:DataContext="{d:DesignInstance visuals:ResourceViewModel}"
             Padding="4">
  <UserControl.Resources>

    <Color x:Key="HighlightColor">#80FF4040</Color>
    <SolidColorBrush x:Key="HighlightBrush" Color="{StaticResource HighlightColor}" />
    <LinearGradientBrush x:Key="HatchBrush" StartPoint="0,0" EndPoint="4,4" SpreadMethod="Repeat" MappingMode="Absolute">
      <GradientStop Offset="0" Color="{StaticResource HighlightColor}" />
      <GradientStop Offset="0.75" Color="{StaticResource HighlightColor}" />
      <GradientStop Offset="0.75" Color="DarkGray" />
      <GradientStop Offset="1" Color="DarkGray" />
    </LinearGradientBrush>

    <toms:ConfirmedCommandConverter x:Key="DeleteCommandConverter" Executing="DeleteCommandConverter_Executing" />
    <toms:ConfirmedCommandConverter x:Key="CutCommandConverter" Executing="CutCommandConverter_Executing" />
    <toms:ConfirmedCommandConverter x:Key="ImportExcelCommandConverter" Executing="ImportExcelCommandConverter_Executing" Error="CommandConverter_Error" />
    <toms:ConfirmedCommandConverter x:Key="ExportExcelCommandConverter" Executing="ExportExcelCommandConverter_Executing" Error="CommandConverter_Error" />
    <toms:ConfirmedCommandConverter x:Key="CreateSnapshotCommandConverter" Executing="CreateSnapshotCommandConverter_Executing" Error="CommandConverter_Error" />
    <toms:ConfirmedCommandConverter x:Key="LoadSnapshotCommandConverter" Executing="LoadSnapshotCommandConverter_Executing" Error="CommandConverter_Error" />
    <toms:ConfirmedCommandConverter x:Key="ErrorHandlerCommandConverter" Error="CommandConverter_Error" />

    <Style TargetType="{x:Type Control}" x:Key="ToolbarCommandButtonStyle">
      <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Opacity" Value="0.5" />
        </Trigger>
      </Style.Triggers>
    </Style>

    <CollectionViewSource x:Key="ResourceEntitiesSource" Source="{Binding ResourceManager.ResourceEntities}">
      <CollectionViewSource.SortDescriptions>
        <componentModel:SortDescription PropertyName="ProjectName" />
        <componentModel:SortDescription PropertyName="RelativePath" />
        <componentModel:SortDescription PropertyName="BaseName" />
      </CollectionViewSource.SortDescriptions>
      <CollectionViewSource.GroupDescriptions>
        <PropertyGroupDescription PropertyName="ProjectName" />
      </CollectionViewSource.GroupDescriptions>
    </CollectionViewSource>

    <dgx:RegexContentFilterFactory x:Key="RegexContentFilterFactory" />

    <styles:InvertGrayEffect x:Key="InvertGrayEffect" />

    <Style TargetType="Image" x:Key="ImageStyle">
      <Style.Triggers>
        <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
        <DataTrigger Binding="{Binding IsDarkTheme, Source={composition:Import themes:ThemeManager}}" Value="True">
          <Setter Property="Effect" Value="{StaticResource InvertGrayEffect}" />
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <Style TargetType="Image" BasedOn="{StaticResource ImageStyle}">
      <Setter Property="Stretch" Value="None" />
    </Style>

  </UserControl.Resources>

  <UserControl.InputBindings>
    <KeyBinding Key="N" Modifiers="Control" Command="{composition:Import tools:AddNewKeyCommand}" CommandParameter="{Binding ElementName=LayoutRoot}" />
    <KeyBinding Key="Insert" Modifiers="Shift" Command="{composition:Import tools:AddNewKeyCommand}" CommandParameter="{Binding ElementName=LayoutRoot}" />
  </UserControl.InputBindings>

  <Grid FocusManager.FocusedElement="{Binding ElementName=DataGrid}">

    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="240" MinWidth="120" />
      <ColumnDefinition Width="4" />
      <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>

    <Grid Grid.Column="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="24" MinHeight="24" />
        <RowDefinition Height="4" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <DockPanel Grid.Row="0">
        <StackPanel Orientation="Horizontal" DockPanel.Dock="Left" Height="16">
          <Decorator Width="16" />
          <CheckBox VerticalAlignment="Center"
                    IsThreeState="True" IsChecked="{Binding AreAllFilesSelected, ElementName=SelectAllBehavior}" Focusable="False"
                    Style="{DynamicResource {x:Static styles:ResourceKeys.CheckBoxStyle}}" />
          <Decorator Width="4" />
        </StackPanel>
        <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static styles:ResourceKeys.BorderBrush}}">
          <DockPanel>
            <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
              <Decorator Width="4" />
              <Path Data="M0,0 L10,0 6,4 6,9 4,9 4,4 Z" Fill="Gray"
                    VerticalAlignment="Center" HorizontalAlignment="Right" Margin="2,0" />
            </StackPanel>
            <Decorator DockPanel.Dock="Top" Height="1" />
            <TextBox x:Name="EntityFilter" Text="{Binding Path=ResourceFilter, Source={x:Static properties:Settings.Default}, Mode=TwoWay}"
                     ToolTip="{x:Static properties:Resources.ResourceFilterToolTip}" BorderThickness="0" Style="{DynamicResource {x:Static styles:ResourceKeys.TextBoxStyle}}" />
          </DockPanel>
        </Border>
      </DockPanel>

      <ListBox x:Name="ListBox" Grid.Row="2"
               ItemsSource="{Binding Source={StaticResource ResourceEntitiesSource}}"
               Padding="5,0" BorderThickness="1" SelectionMode="Extended"
               toms:MultiSelectorExtensions.SelectionBinding="{Binding SelectedEntities}"
               VirtualizingPanel.IsVirtualizingWhenGrouping="True"
               Style="{DynamicResource {x:Static styles:ResourceKeys.ListBoxStyle}}">
        <ListBox.ItemTemplate>
          <DataTemplate DataType="model:ResourceEntity">
            <StackPanel ToolTip="{Binding Path=DirectoryName, Mode=OneWay}" HorizontalAlignment="Left" Orientation="Horizontal">
              <CheckBox IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Focusable="False" Style="{DynamicResource {x:Static styles:ResourceKeys.CheckBoxStyle}}" VerticalAlignment="Center" />
              <Decorator Width="4" />
              <TextBlock Background="Transparent" VerticalAlignment="Center">
                <Run Text="{Binding Path=RelativePath, Mode=OneWay}" /><Run Text="{Binding Path=BaseName, Mode=OneWay}" />
              </TextBlock>
              <Decorator Width="4" />
              <ContentControl Focusable="False">
                <Interactions:Interaction.Behaviors>
                  <composition:ContentControlCompositionBehavior RegionId="{x:Static infrastructure:RegionId.ProjectListItemDecorator}" CompositionContext="{Binding}" />
                </Interactions:Interaction.Behaviors>
              </ContentControl>
            </StackPanel>
          </DataTemplate>
        </ListBox.ItemTemplate>
        <ListBox.GroupStyle>
          <GroupStyle>
            <GroupStyle.ContainerStyle>
              <Style TargetType="{x:Type GroupItem}">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupItem}">
                      <StackPanel Background="Transparent" d:DataContext="{d:DesignInstance GroupItem}">
                        <Interactions:Interaction.Behaviors>
                          <toms:SelectGroupOnGroupHeaderClickBehavior />
                        </Interactions:Interaction.Behaviors>
                        <TextBlock Text="{Binding Path=Name}" FontWeight="Bold" Margin="0,5,0,3" />
                        <ItemsPresenter Margin="4,0,0,0" />
                      </StackPanel>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </GroupStyle.ContainerStyle>
          </GroupStyle>
        </ListBox.GroupStyle>
        <ListBox.ContextMenu>
          <ContextMenu Style="{DynamicResource {x:Static composition:ResourceKeys.CompositeContextMenuStyle}}">
            <Interactions:Interaction.Behaviors>
              <composition:ItemsControlCompositionBehavior RegionId="{x:Static infrastructure:RegionId.ProjectListContextMenu}" />
            </Interactions:Interaction.Behaviors>
          </ContextMenu>
        </ListBox.ContextMenu>
        <Interactions:Interaction.Behaviors>
          <behaviors:EntityFilter FilterText="{Binding Text, ElementName=EntityFilter}" />
          <behaviors:SelectAllBehavior x:Name="SelectAllBehavior" />
        </Interactions:Interaction.Behaviors>
      </ListBox>
    </Grid>

    <GridSplitter Grid.Column="1" Width="4" HorizontalAlignment="Left"
                  VerticalAlignment="Stretch" Style="{DynamicResource {x:Static styles:ResourceKeys.GridSplitterStyle}}" />

    <Grid Grid.Column="2">
      <Grid.RowDefinitions>
        <RowDefinition Height="24" MinHeight="24" />
        <RowDefinition Height="4" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>

      <DockPanel Grid.Row="0">
        <ToolBarTray DockPanel.Dock="Left" Background="{DynamicResource {x:Static SystemColors.MenuBarBrushKey}}">
          <ToolBar x:Name="ToolBar" Background="Transparent" KeyboardNavigation.TabNavigation="Continue">
            <ToolBar.Template>
              <ControlTemplate TargetType="{x:Type ToolBar}">
                <Grid Name="Grid" SnapsToDevicePixels="true">
                  <Border x:Name="MainPanelBorder" Background="{TemplateBinding Control.Background}"
                          BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}"
                          Padding="{TemplateBinding Control.Padding}">
                    <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                      <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center"
                                        VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                      <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </DockPanel>
                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </ToolBar.Template>
            <Button ToolTip="Save all changes"
                    Style="{StaticResource ToolbarCommandButtonStyle}"
                    Command="{Binding SaveCommand, Converter={StaticResource ErrorHandlerCommandConverter}}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/save.png" />
            </Button>
            <Button ToolTip="{x:Static properties:Resources.RefreshViewToolTip}"
                    Style="{StaticResource ToolbarCommandButtonStyle}"
                    Command="{Binding ReloadCommand, Converter={StaticResource ErrorHandlerCommandConverter}}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/refresh.png" />
            </Button>
            <Separator />
            <RadioButton IsChecked="True" GroupName="Grouping" ToolTip="{x:Static properties:Resources.FlatViewToolTip}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/flat.png" />
            </RadioButton>
            <RadioButton x:Name="GroupedViewButton" GroupName="Grouping" ToolTip="{x:Static properties:Resources.GroupedViewToolTip}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/grouped.png" />
            </RadioButton>
            <Separator />
            <ToggleButton x:Name="ErrorsOnlyFilterButton"
                          ToolTip="{x:Static properties:Resources.ShowOnlyMissingToolTip}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/errorFilter.png" />
            </ToggleButton>
            <ToggleButton x:Name="ColumnChooserToggleButton"
                          ToolTip="{x:Static properties:Resources.ChooseColumnsToolTip}">
              <StackPanel Orientation="Horizontal">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/columns.png" />
                <Decorator Width="4" />
                <Path Data="M 0 0 L 3.5 4 L 7 0 Z" Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" VerticalAlignment="Center" />
              </StackPanel>
            </ToggleButton>
            <Button ToolTip="{x:Static properties:Resources.AddLanguageToolTip}" Click="AddLanguage_Click">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/addColumns.png" />
            </Button>
            <ToggleButton ToolTip="{x:Static properties:Resources.FindCodeReferencesButtonToolTip}"
                          IsChecked="{Binding IsFindCodeReferencesEnabled, Source={x:Static model:Settings.Default}, Mode=TwoWay}"
                          Command="{Binding ReloadCommand, Converter={StaticResource ErrorHandlerCommandConverter}}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/references.png" />
            </ToggleButton>
            <ToggleButton ToolTip="{x:Static properties:Resources.IndexColumnToggleButtonToolTip}"
                          IsChecked="{Binding IsIndexColumnVisible, Source={x:Static properties:Settings.Default}, Mode=TwoWay}">
              <TextBlock Width="16" Height="16" Text="#" TextAlignment="Center" />
            </ToggleButton>
            <ToggleButton ToolTip="{x:Static properties:Resources.CellSelectionToolTip}"
                          IsChecked="{Binding IsCellSelectionEnabled, Mode=TwoWay, Source={x:Static properties:Settings.Default}}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/cellSelection.png" />
            </ToggleButton>
            <ToggleButton ToolTip="{x:Static properties:Resources.WrapLongLinesToolTip}"
                          IsChecked="{Binding IsWrapLinesEnabled, Mode=TwoWay, Source={x:Static properties:Settings.Default}}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/wrap.png" />
            </ToggleButton>
            <Separator />
            <Button ToolTip="{x:Static properties:Resources.DeleteToolTip}"
                    Style="{StaticResource ToolbarCommandButtonStyle}"
                    Command="{Binding Path=DeleteCommand, Converter={StaticResource DeleteCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/delete.png" />
            </Button>
            <Button ToolTip="{x:Static properties:Resources.CutToolTip}"
                    Style="{StaticResource ToolbarCommandButtonStyle}"
                    Command="{Binding Path=CutCommand, Converter={StaticResource CutCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/cut.png" />
            </Button>
            <Button ToolTip="{x:Static properties:Resources.CopyToolTip}"
                    Style="{StaticResource ToolbarCommandButtonStyle}"
                    Command="{Binding Path=CopyCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/copy.png" />
            </Button>
            <Button ToolTip="{x:Static properties:Resources.PasteToolTip}"
                    Style="{StaticResource ToolbarCommandButtonStyle}"
                    Command="{Binding Path=PasteCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/paste.png" />
            </Button>
            <Button ToolTip="{x:Static properties:Resources.AddKeyToolTip}"
                    Style="{StaticResource ToolbarCommandButtonStyle}"
                    Command="{composition:Import tools:AddNewKeyCommand}" CommandParameter="{Binding ElementName=LayoutRoot}">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/add.png" />
            </Button>
            <Separator />
            <Menu VerticalAlignment="Center" Style="{DynamicResource {x:Static styles:ResourceKeys.MenuStyle}}">
              <MenuItem Padding="2" Style="{DynamicResource {x:Static styles:ResourceKeys.MenuItemStyle}}" HeaderTemplate="{DynamicResource {x:Static themes:ResourceKeys.MenuItemDropDownDataTemplate}}">
                <MenuItem.Header>
                  <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/excel.png" />
                </MenuItem.Header>
                <MenuItem Header="{x:Static properties:Resources.ExportExcelAll}"
                          Style="{DynamicResource {x:Static styles:ResourceKeys.MenuItemStyle}}"
                          Command="{Binding ExportExcelCommand, Converter={StaticResource ExportExcelCommandConverter}}" />
                <MenuItem Header="{x:Static properties:Resources.ExportExcelSelection}"
                          Style="{DynamicResource {x:Static styles:ResourceKeys.MenuItemStyle}}"
                          Command="{Binding ExportExcelCommand, Converter={StaticResource ExportExcelCommandConverter}}"
                          CommandParameter="{Binding ElementName=DataGrid, Converter={x:Static converters:DataGridToSelectionScopeConverter.Default}}" />
                <MenuItem Header="{x:Static properties:Resources.ImportExcel}"
                          Style="{DynamicResource {x:Static styles:ResourceKeys.MenuItemStyle}}"
                          Command="{Binding ImportExcelCommand, Converter={StaticResource ImportExcelCommandConverter}}" />
              </MenuItem>
              <MenuItem Padding="2" Style="{DynamicResource {x:Static styles:ResourceKeys.MenuItemStyle}}" HeaderTemplate="{DynamicResource {x:Static themes:ResourceKeys.MenuItemDropDownDataTemplate}}">
                <MenuItem.Header>
                  <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/snapshot.png">
                    <Image.Style>
                      <Style TargetType="Image" BasedOn="{StaticResource ImageStyle}">
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding LoadedSnapshot}" Value="{x:Null}">
                            <Setter Property="Opacity" Value=".5" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </Image.Style>
                  </Image>
                </MenuItem.Header>
                <MenuItem Header="{x:Static properties:Resources.CreateSnapshot}"
                          Style="{DynamicResource {x:Static styles:ResourceKeys.MenuItemStyle}}"
                          Command="{Binding CreateSnapshotCommand, Converter={StaticResource CreateSnapshotCommandConverter}}" />
                <MenuItem Header="{x:Static properties:Resources.LoadSnapshot}"
                          Style="{DynamicResource {x:Static styles:ResourceKeys.MenuItemStyle}}"
                          Command="{Binding LoadSnapshotCommand, Converter={StaticResource LoadSnapshotCommandConverter}}" />
                <MenuItem Header="{x:Static properties:Resources.UnloadSnapshot}"
                          Style="{DynamicResource {x:Static styles:ResourceKeys.MenuItemStyle}}"
                          Command="{Binding UnloadSnapshotCommand}" />
              </MenuItem>
            </Menu>
            <Separator />
            <Button ToolTip="{x:Static properties:Resources.LikeButtonToolTip}"
                    Tag="https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager&amp;ssr=false#review-details">
              <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/like.png" />
            </Button>
            <Button ToolTip="{x:Static properties:Resources.DonateButtonToolTip}"
                    Tag="https://github.com/dotnet/ResXResourceManager/blob/master/Documentation/Topics/Donate.md">
              <Grid>
                <Ellipse Width="16" Height="16" Fill="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
                <TextBlock Text="$" FontWeight="Bold" Foreground="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="1,0,0,2" />
              </Grid>
            </Button>
            <Button ToolTip="{x:Static properties:Resources.HelpButtonToolTip}"
                    Tag="https://github.com/dotnet/ResXResourceManager/blob/master/Documentation/Readme.md">
              <Grid Width="16" Height="16">
                <TextBlock Text="?" FontWeight="Bold" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="1,0,0,2" />
              </Grid>
            </Button>
          </ToolBar>
        </ToolBarTray>
        <Popup IsOpen="{Binding Path=IsChecked, ElementName=ColumnChooserToggleButton, Mode=OneWay}"
               StaysOpen="False"
               Placement="Bottom" PlacementTarget="{Binding ElementName=ColumnChooserToggleButton}">
          <Interactions:Interaction.Behaviors>
            <toms:PopupFocusManagerBehavior ToggleButton="{Binding ElementName=ColumnChooserToggleButton}" />
          </Interactions:Interaction.Behaviors>
          <Border Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" Padding="8,4" BorderThickness="1" BorderBrush="{DynamicResource {x:Static styles:ResourceKeys.BorderBrush}}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <CheckBox Content="{x:Static properties:Resources.AllLanguages}" Style="{DynamicResource {x:Static styles:ResourceKeys.CheckBoxStyle}}" Margin="2" Grid.Row="0">
                <Interactions:Interaction.Behaviors>
                  <behaviors:SelectAllColumnsBehavior ListBox="{Binding ElementName=SelectedColumns}" ColumnType="Language" />
                </Interactions:Interaction.Behaviors>
              </CheckBox>
              <CheckBox Content="{x:Static properties:Resources.AllComments}" Style="{DynamicResource {x:Static styles:ResourceKeys.CheckBoxStyle}}" Margin="2" Grid.Row="1">
                <Interactions:Interaction.Behaviors>
                  <behaviors:SelectAllColumnsBehavior ListBox="{Binding ElementName=SelectedColumns}" ColumnType="Comment" />
                </Interactions:Interaction.Behaviors>
              </CheckBox>
              <Separator Grid.Row="2"/>
              <ListBox x:Name="SelectedColumns" ItemsSource="{Binding Columns, ElementName=DataGrid, Converter={x:Static converters:LanguageColumnFilterConverter.Default}}"
                       Style="{DynamicResource {x:Static styles:ResourceKeys.ListBoxStyle}}"
                       SelectionMode="Multiple" KeyboardNavigation.TabNavigation="Once"
                       Background="Transparent" BorderThickness="0"
                       ScrollViewer.VerticalScrollBarVisibility="Auto"
                       Grid.Row="3">
                <ListBox.ItemTemplate>
                  <DataTemplate DataType="DataGridColumn">
                    <DockPanel Margin="2">
                      <CheckBox DockPanel.Dock="Left"
                                IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}"
                                Style="{DynamicResource {x:Static styles:ResourceKeys.CheckBoxStyle}}" />
                      <Decorator DockPanel.Dock="Left" Width="2" />
                      <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                      <Image DockPanel.Dock="Left"
                             Source="{Binding Path=Header.EffectiveCulture, Converter={composition:Import converters:CultureToImageSourceConverter}, FallbackValue={x:Null}}" />
                      <Decorator DockPanel.Dock="Left" Width="2" />
                      <Decorator DockPanel.Dock="Right" Width="3" />
                      <ContentPresenter Content="{Binding Path=Header}" VerticalAlignment="Center" />
                    </DockPanel>
                  </DataTemplate>
                </ListBox.ItemTemplate>
                <ListBox.ItemContainerStyle>
                  <Style TargetType="ListBoxItem">
                    <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                    <Setter Property="IsSelected" Value="{Binding Path=Visibility, Converter={x:Static toms:VisibilityToBooleanConverter.Default}}" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="ListBoxItem">
                          <ContentPresenter />
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </ListBox.ItemContainerStyle>
              </ListBox>
            </Grid>
          </Border>
        </Popup>
        <Decorator DockPanel.Dock="Left" Width="4" />
        <toms:TextBoxVisibleWhiteSpaceDecorator WhiteSpaceColor="{Binding Foreground, ElementName=TextBox}" WhiteSpaceOpacity="0.4" WhiteSpaces="All">
          <TextBox x:Name="TextBox" AcceptsReturn="True" AcceptsTab="True" tools:Spellcheck.IsEnabled="True"
                   TextWrapping="Wrap" IsTabStop="False" BorderThickness="1" Style="{DynamicResource {x:Static styles:ResourceKeys.TextBoxStyle}}">
            <Interactions:Interaction.Behaviors>
              <toms:ZoomFontSizeOnMouseWheelBehavior />
              <behaviors:SynchronizeTextBoxWithDataGridCellBehavior DataGrid="{Binding ElementName=DataGrid}" />
            </Interactions:Interaction.Behaviors>
          </TextBox>
        </toms:TextBoxVisibleWhiteSpaceDecorator>
      </DockPanel>

      <GridSplitter Grid.Row="1" Height="4" HorizontalAlignment="Stretch" VerticalAlignment="Center" Style="{DynamicResource {x:Static styles:ResourceKeys.GridSplitterStyle}}" />

      <Border Grid.Row="2" BorderThickness="1"
              BorderBrush="{DynamicResource {x:Static styles:ResourceKeys.BorderBrush}}">
        <DockPanel>
          <Border DockPanel.Dock="Bottom" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource {x:Static styles:ResourceKeys.BorderBrush}}">
            <DockPanel DockPanel.Dock="Bottom" Background="{Binding Background, ElementName=DataGrid}">
              <TextBlock DockPanel.Dock="Right" VerticalAlignment="Center" ToolTip="{x:Static properties:Resources.SelectedTotalToolTip}">
                <Run Text="{Binding SelectedTableEntries.Count, Mode=OneWay}" /><Run Text="/" /><Run Text="{Binding ResourceTableEntryCount, Mode=OneWay}" /><Run Text="  " />
              </TextBlock>
              <Control Focusable="False">
                <Control.Resources>
                  <DataTemplate DataType="{x:Type model:ResourceEntity}">
                    <TextBlock>
                      <Run Text="{Binding Path=BaseName, Mode=OneWay}" FontWeight="Bold" />
                      (<Run Text="{Binding Path=DirectoryName, Mode=OneWay}" />)
                    </TextBlock>
                  </DataTemplate>
                  <DataTemplate DataType="{x:Type model:ResourceTableEntry}">
                    <TextBlock>
                      <Run Text="{Binding Path=Key, Mode=OneWay}" Foreground="Black" />:
                      <Run Text="{Binding Path=Container.BaseName, Mode=OneWay}" FontWeight="Bold" />
                      (<Run Text="{Binding Path=Container.DirectoryName, Mode=OneWay}" />)
                    </TextBlock>
                  </DataTemplate>
                </Control.Resources>
                <Control.Template>
                  <ControlTemplate>
                    <ContentControl x:Name="footerContent" Foreground="Gray" Margin="4" Focusable="False">
                      <TextBlock Text="{x:Static properties:Resources.MultipleSelection}" />
                    </ContentControl>
                    <ControlTemplate.Triggers>
                      <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                          <Condition Binding="{Binding SelectedItems.Count, ElementName=DataGrid}" Value="0" />
                          <Condition Binding="{Binding SelectedItems.Count, ElementName=ListBox}" Value="0" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Content" TargetName="footerContent" Value="{x:Static properties:Resources.NoSelection}" />
                      </MultiDataTrigger>
                      <DataTrigger Binding="{Binding SelectedItems.Count, ElementName=ListBox}" Value="1">
                        <Setter Property="Content" TargetName="footerContent" Value="{Binding SelectedItem, ElementName=ListBox}" />
                      </DataTrigger>
                      <DataTrigger Binding="{Binding SelectedItems.Count, ElementName=DataGrid}" Value="1">
                        <Setter Property="Content" TargetName="footerContent" Value="{Binding SelectedItem, ElementName=DataGrid}" />
                      </DataTrigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Control.Template>
              </Control>
            </DockPanel>
          </Border>
          <Grid>
            <DataGrid x:Name="DataGrid" FrozenColumnCount="1" BorderThickness="0"
                      AutoGenerateColumns="False" CanUserAddRows="False"
                      CanUserDeleteRows="False" CanUserResizeRows="False"
                      dgx:DataGridFilter.ContentFilterFactory="{StaticResource RegexContentFilterFactory}"
                      dgx:Tools.ForceCommitOnLostFocus="True"
                      dgx:Tools.ApplyInitialSorting="True"
                      VirtualizingPanel.IsVirtualizingWhenGrouping="True"
                      EnableColumnVirtualization="True"
                      EnableRowVirtualization="True"
                      toms:MultiSelectorExtensions.SelectionBinding="{Binding SelectedTableEntries}">
              <DataGrid.Resources>

                <DataTemplate DataType="{x:Type columnHeaders:LanguageHeader}">
                  <DockPanel>
                    <Grid DockPanel.Dock="Left" Background="Transparent">
                      <Image x:Name="image" Stretch="None"
                             Source="{Binding Path=EffectiveCulture, Converter={composition:Import converters:CultureToImageSourceConverter}}" />
                    </Grid>
                    <Decorator x:Name="padding" DockPanel.Dock="Left" Width="4" />
                    <TextBlock Text="{Binding Path=DisplayName}" TextTrimming="CharacterEllipsis" Style="{StaticResource {x:Static toms:ResourceKeys.AutoToolTipTextBoxStyle}}" />
                  </DockPanel>
                </DataTemplate>

                <DataTemplate DataType="{x:Type columnHeaders:CommentHeader}">
                  <TextBlock>
                    <Run Text="{x:Static properties:Resources.CommentColumnHeader}" /><Run Text=" (" />
                    <InlineUIContainer>
                      <Grid>
                        <Image x:Name="image" Stretch="None" Margin="1,2,1,-2"
                               Source="{Binding Path=EffectiveCulture, Converter={composition:Import converters:CultureToImageSourceConverter}}" />
                      </Grid>
                    </InlineUIContainer>
                    <Run Text=")" />
                  </TextBlock>
                </DataTemplate>

                <GroupStyle x:Key="GroupStyle">
                  <GroupStyle.ContainerStyle>
                    <Style TargetType="GroupItem">
                      <Setter Property="Template">
                        <Setter.Value>
                          <ControlTemplate TargetType="{x:Type GroupItem}">
                            <StackPanel Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" d:DataContext="{d:DesignInstance GroupItem}">
                              <SelectiveScrollingGrid SelectiveScrollingOrientation="Vertical">
                                <ContentControl>
                                  <TextBlock Text="{Binding Path=Name}" FontWeight="Bold" Margin="4" />
                                  <Interactions:Interaction.Triggers>
                                    <Interactions:EventTrigger EventName="MouseDoubleClick">
                                      <Interactions:EventTrigger.Actions>
                                        <Interactions:InvokeCommandAction Command="{Binding ElementName=DataGrid, Path=DataContext.SelectEntityCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding Name}" />
                                      </Interactions:EventTrigger.Actions>
                                    </Interactions:EventTrigger>
                                  </Interactions:Interaction.Triggers>
                                </ContentControl>
                              </SelectiveScrollingGrid>
                              <Border BorderThickness="0,1,0,0" BorderBrush="{DynamicResource {x:Static styles:ResourceKeys.BorderBrush}}">
                                <ItemsPresenter />
                              </Border>
                            </StackPanel>
                          </ControlTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </GroupStyle.ContainerStyle>
                </GroupStyle>

                <Style TargetType="DataGridColumnHeadersPresenter">
                  <Setter Property="MinHeight" Value="12" />
                </Style>

              </DataGrid.Resources>

              <DataGrid.InputBindings>
                <KeyBinding Key="Delete" Command="{Binding DeleteCommand, Converter={StaticResource DeleteCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}" />
                <KeyBinding Key="Delete" Modifiers="Shift" Command="{Binding CutCommand, Converter={StaticResource CutCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}" />
                <KeyBinding Key="X" Modifiers="Control" Command="{Binding CutCommand, Converter={StaticResource CutCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}" />
                <KeyBinding Key="C" Modifiers="Control" Command="{Binding CopyCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}" />
                <KeyBinding Key="V" Modifiers="Control" Command="{Binding PasteCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}" />
              </DataGrid.InputBindings>

              <DataGrid.ItemsPanel>
                <ItemsPanelTemplate>
                  <DataGridRowsPresenter x:Name="PART_RowsPresenter"
                                         TextElement.FontSize="{Binding Path=(view:Appearance.TextFontSize), RelativeSource={RelativeSource Self}}">
                    <DataGridRowsPresenter.ContextMenu>
                      <ContextMenu>
                        <ContextMenu.Style>
                          <Style TargetType="ContextMenu" BasedOn="{StaticResource {x:Static composition:ResourceKeys.CompositeContextMenuStyle}}">
                            <Setter Property="composition:VisualComposition.RegionId" Value="{x:Static infrastructure:RegionId.ResourceTableContextMenu}" />
                            <Style.Triggers>
                              <DataTrigger Binding="{Binding IsCellSelectionEnabled, Source={x:Static properties:Settings.Default}}" Value="True">
                                <Setter Property="composition:VisualComposition.RegionId" Value="{x:Static infrastructure:RegionId.ResourceTableItemContextMenu}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </ContextMenu.Style>
                      </ContextMenu>
                    </DataGridRowsPresenter.ContextMenu>
                    <Interactions:Interaction.Behaviors>
                      <toms:ZoomFontSizeOnMouseWheelBehavior />
                    </Interactions:Interaction.Behaviors>
                  </DataGridRowsPresenter>
                </ItemsPanelTemplate>
              </DataGrid.ItemsPanel>

              <DataGrid.RowStyle>
                <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Static styles:ResourceKeys.DataGridRowStyle}}">
                  <Setter Property="MaxHeight" Value="100" />
                  <Style.Triggers>
                    <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                    <DataTrigger Binding="{Binding IsDuplicateKey}" Value="True">
                      <Setter Property="Background" Value="{StaticResource HighlightBrush}" />
                    </DataTrigger>
                    <Trigger Property="IsSelected" Value="True">
                      <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </DataGrid.RowStyle>

              <DataGrid.CellStyle>
                <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Static styles:ResourceKeys.DataGridCellStyle}}">

                  <Setter Property="BorderThickness" Value="1" />
                  <Setter Property="Background" Value="{StaticResource HighlightBrush}" />
                  <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}}" />
                  <Setter Property="ToolTip">
                    <Setter.Value>
                      <ToolTip>
                        <ItemsControl ItemsSource="{Binding Path=(tools:ColumnManager.CellAnnotations), RelativeSource={RelativeSource Mode=Self}}" />
                      </ToolTip>
                    </Setter.Value>
                  </Setter>

                  <Style.Triggers>
                    <!-- ReSharper disable Xaml.BindingWithContextNotResolved -->
                    <DataTrigger Binding="{Binding Path=(tools:ColumnManager.CellAnnotations).Count, RelativeSource={RelativeSource Mode=Self}, FallbackValue=0}" Value="0">
                      <Setter Property="Background" Value="{x:Null}" />
                      <Setter Property="ToolTip" Value="{x:Null}" />
                    </DataTrigger>

                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Column.Header.ColumnType, RelativeSource={RelativeSource Mode=Self}, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static columnHeaders:ColumnType.Language}" />
                        <Condition Binding="{Binding Path=Content.Text, RelativeSource={RelativeSource Mode=Self}, UpdateSourceTrigger=PropertyChanged}" Value="" />
                      </MultiDataTrigger.Conditions>
                      <MultiDataTrigger.Setters>
                        <Setter Property="Background" Value="{StaticResource HighlightBrush}" />
                      </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding Path=(tools:ColumnManager.ResourceFileExists), RelativeSource={RelativeSource Mode=Self}}" Value="False">
                      <Setter Property="Background" Value="{StaticResource HatchBrush}" />
                      <Setter Property="ToolTip" Value="{x:Static properties:Resources.NoResourceFileForResource}" />
                    </DataTrigger>

                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Column.Header.ColumnType, RelativeSource={RelativeSource Mode=Self}, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static columnHeaders:ColumnType.Language}" />
                        <Condition Binding="{Binding Path=Content.Text, RelativeSource={RelativeSource Mode=Self}, UpdateSourceTrigger=PropertyChanged}" Value="" />
                        <Condition Binding="{Binding Path=IsInvariant}" Value="True" />
                      </MultiDataTrigger.Conditions>
                      <MultiDataTrigger.Setters>
                        <Setter Property="Background" Value="{DynamicResource {x:Static styles:ResourceKeys.BorderBrush}}" />
                      </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Column.Header.ColumnType, RelativeSource={RelativeSource Mode=Self}, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static columnHeaders:ColumnType.Language}" />
                        <Condition Binding="{Binding Path=Content.Text, RelativeSource={RelativeSource Mode=Self}, UpdateSourceTrigger=PropertyChanged}" Value="" />
                        <Condition Binding="{Binding Path=(tools:ColumnManager.IsCellInvariant), RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                      </MultiDataTrigger.Conditions>
                      <MultiDataTrigger.Setters>
                        <Setter Property="Background" Value="{DynamicResource {x:Static styles:ResourceKeys.BorderBrush}}" />
                      </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <Trigger Property="IsSelected" Value="True">
                      <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </Trigger>
                    <!-- ReSharper restore Xaml.BindingWithContextNotResolved -->
                  </Style.Triggers>
                </Style>
              </DataGrid.CellStyle>

              <DataGrid.Style>
                <Style TargetType="DataGrid" BasedOn="{StaticResource {x:Static styles:ResourceKeys.DataGridStyle}}">
                  <Setter Property="ItemsSource" Value="{Binding ResourceTableEntries}" />
                  <Setter Property="dgx:DataGridFilter.IsAutoFilterEnabled" Value="True" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=IsChecked, ElementName=GroupedViewButton}" Value="True">
                      <Setter Property="ItemsSource" Value="{Binding GroupedResourceTableEntries}" />
                      <Setter Property="toms:StyleBindings.GroupStyle" Value="{StaticResource GroupStyle}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsCellSelectionEnabled, Source={x:Static properties:Settings.Default}}" Value="True">
                      <Setter Property="SelectionUnit" Value="CellOrRowHeader" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </DataGrid.Style>

              <Interactions:Interaction.Behaviors>
                <dgx:BeginEditOnCtrlEnterBehavior />
                <dgx:ExtendedStarSizeBehavior ColumnHeaderGripperToolTipStyle="{StaticResource {x:Static themes:ResourceKeys.ColumnHeaderGripperToolTipStyleKey}}" />
                <behaviors:ShowErrorsOnlyBehavior x:Name="ShowErrorsOnlyBehavior" ToggleButton="{Binding ElementName=ErrorsOnlyFilterButton}" />
                <behaviors:DataGridTryBeginEditBehavior />
              </Interactions:Interaction.Behaviors>

              <Interactions:Interaction.Triggers>
                <Interactions:PropertyChangedTrigger Binding="{Binding LoadedSnapshot}">
                  <Interactions:PropertyChangedTrigger.Actions>
                    <Interactions:CallMethodAction TargetObject="{Binding ElementName=ShowErrorsOnlyBehavior}" MethodName="Refresh" />
                  </Interactions:PropertyChangedTrigger.Actions>
                </Interactions:PropertyChangedTrigger>
              </Interactions:Interaction.Triggers>
            </DataGrid>
          </Grid>
        </DockPanel>
      </Border>

    </Grid>

  </Grid>

  <Interactions:Interaction.Behaviors>
    <composition:CommandRoutingBehavior CommandSource="view:DeleteCommand"
                                        CommandTarget="{Binding DeleteCommand, Converter={StaticResource DeleteCommandConverter}}"
                                        CommandParameter="{Binding ElementName=DataGrid}" />
    <composition:CommandRoutingBehavior CommandSource="view:CutCommand"
                                        CommandTarget="{Binding CutCommand, Converter={StaticResource CutCommandConverter}}"
                                        CommandParameter="{Binding ElementName=DataGrid}" />
    <composition:CommandRoutingBehavior CommandSource="view:CopyCommand"
                                        CommandTarget="{Binding CopyCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        CommandParameter="{Binding ElementName=DataGrid}" />
    <composition:CommandRoutingBehavior CommandSource="view:PasteCommand"
                                        CommandTarget="{Binding PasteCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        CommandParameter="{Binding ElementName=DataGrid}" />
    <!-- ReSharper disable Xaml.BindingWithContextNotResolved -->
    <composition:CommandRoutingBehavior CommandSource="view:IsInvariantCommand"
                                        CommandTarget="{Binding ToggleInvariantCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        IsChecked="{Binding Path=SelectedItem.IsInvariant, Mode=OneWay, ElementName=DataGrid}" />
    <composition:CommandRoutingBehavior CommandSource="view:IsItemInvariantCommand"
                                        CommandTarget="{Binding ToggleItemInvariantCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        CommandParameter="{Binding ElementName=DataGrid}"
                                        IsChecked="{Binding Path=(tools:ColumnManager.SelectedCells), Mode=OneWay, ElementName=DataGrid, Converter={x:Static converters:IsCellSelectionInvariantConverter.Default}}" />
    <composition:CommandRoutingBehavior CommandSource="view:ToggleCellSelectionCommand"
                                        CommandTarget="{Binding ToggleCellSelectionCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        IsChecked="{Binding IsCellSelectionEnabled, Mode=OneWay, Source={x:Static properties:Settings.Default}}" />
    <composition:CommandRoutingBehavior CommandSource="view:ToggleConsistencyCheckStringFormatCommand"
                                        CommandTarget="{Binding ToggleConsistencyCheckCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        CommandParameter="{x:Static model:ResourceTableEntryRuleStringFormat.Id}"
                                        IsChecked="{Binding Path=SelectedItem.IsRuleEnabled[StringFormat], Mode=OneWay, ElementName=DataGrid}" />
    <composition:CommandRoutingBehavior CommandSource="view:ToggleConsistencyCheckPunctuationLeadCommand"
                                        CommandTarget="{Binding ToggleConsistencyCheckCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        CommandParameter="{x:Static model:ResourceTableEntryRulePunctuationLead.Id}"
                                        IsChecked="{Binding Path=SelectedItem.IsRuleEnabled[PunctuationLead], Mode=OneWay, ElementName=DataGrid}" />
    <composition:CommandRoutingBehavior CommandSource="view:ToggleConsistencyCheckPunctuationTailCommand"
                                        CommandTarget="{Binding ToggleConsistencyCheckCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        CommandParameter="{x:Static model:ResourceTableEntryRulePunctuationTail.Id}"
                                        IsChecked="{Binding Path=SelectedItem.IsRuleEnabled[PunctuationTail], Mode=OneWay, ElementName=DataGrid}" />
    <composition:CommandRoutingBehavior CommandSource="view:ToggleConsistencyCheckWhiteSpaceLeadCommand"
                                        CommandTarget="{Binding ToggleConsistencyCheckCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        CommandParameter="{x:Static model:ResourceTableEntryRuleWhiteSpaceLead.Id}"
                                        IsChecked="{Binding Path=SelectedItem.IsRuleEnabled[WhiteSpaceLead], Mode=OneWay, ElementName=DataGrid}" />
    <composition:CommandRoutingBehavior CommandSource="view:ToggleConsistencyCheckWhiteSpaceTailCommand"
                                        CommandTarget="{Binding ToggleConsistencyCheckCommand, Converter={StaticResource ErrorHandlerCommandConverter}}"
                                        CommandParameter="{x:Static model:ResourceTableEntryRuleWhiteSpaceTail.Id}"
                                        IsChecked="{Binding Path=SelectedItem.IsRuleEnabled[WhiteSpaceTail], Mode=OneWay, ElementName=DataGrid}" />
    <!-- ReSharper restore Xaml.BindingWithContextNotResolved -->
  </Interactions:Interaction.Behaviors>

  <Interactions:Interaction.Triggers>
    <Interactions:EventTrigger EventName="Loaded">
      <Interactions:InvokeCommandAction Command="{Binding BeginFindCodeReferencesCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" />
    </Interactions:EventTrigger>
  </Interactions:Interaction.Triggers>

</UserControl>